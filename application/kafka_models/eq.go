// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     eq.avsc
 */
package kafka_models

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Eq struct {
	Id string `json:"_id"`

	Name string `json:"Name"`

	Activity string `json:"Activity"`

	Publish_status string `json:"Publish_status"`
}

const EqAvroCRC64Fingerprint = "\xccU\x9a\"\x94n\xe1m"

func NewEq() Eq {
	r := Eq{}
	return r
}

func DeserializeEq(r io.Reader) (Eq, error) {
	t := NewEq()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEqFromSchema(r io.Reader, schema string) (Eq, error) {
	t := NewEq()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEq(r Eq, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Activity, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Publish_status, w)
	if err != nil {
		return err
	}
	return err
}

func (r Eq) Serialize(w io.Writer) error {
	return writeEq(r, w)
}

func (r Eq) Schema() string {
	return "{\"fields\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Activity\",\"type\":\"string\"},{\"name\":\"Publish_status\",\"type\":\"string\"}],\"name\":\"eq.eq\",\"type\":\"record\"}"
}

func (r Eq) SchemaName() string {
	return "eq.eq"
}

func (_ Eq) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Eq) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Eq) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Eq) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Eq) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Eq) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Eq) SetString(v string)   { panic("Unsupported operation") }
func (_ Eq) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Eq) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	case 2:
		w := types.String{Target: &r.Activity}

		return w

	case 3:
		w := types.String{Target: &r.Publish_status}

		return w

	}
	panic("Unknown field index")
}

func (r *Eq) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Eq) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Eq) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Eq) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Eq) HintSize(int)                     { panic("Unsupported operation") }
func (_ Eq) Finalize()                        {}

func (_ Eq) AvroCRC64Fingerprint() []byte {
	return []byte(EqAvroCRC64Fingerprint)
}

func (r Eq) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["_id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["Activity"], err = json.Marshal(r.Activity)
	if err != nil {
		return nil, err
	}
	output["Publish_status"], err = json.Marshal(r.Publish_status)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Eq) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for _id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Activity"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Activity); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Activity")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Publish_status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Publish_status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Publish_status")
	}
	return nil
}
